Lean Startup
------------

Vision
- Start
- Define
- Learn
- Experiment

Steer
- Leap
- Test
- Measure
- Pivot


Accelerate
 - Batch
 - Grow
 - Adapt
 - Innovate
 
Vision
========

Chapter 1: Start
----------------
- Startups need to have Vision==>Strategy==>Product
It's like a launching a car - Having means of land-transport is your vision.
A car is the product.
Tuning the engine is example of tuning one of the 'engines of growth'.

Continuously get feedback so tune and improve the engine. Similar to our everyday release activities.
Deciding to launch a car and doing test drives is example of product strategy. What features to tune.
Is decidedly different from launching a rocket. Feedback and controls and experiments are much harder to run.
 - Let's build cars, not rockets. Get quick feedback on handling, and keep tuning the engines.

Chapter 2: Define
-----------------
*START-UP*: 
" A startup is a human institution designed to create a new product or service under conditions of extreme uncertainty."

Key Terms: 
1. Human institution
2. New Product or Service
3. Condition of extreme uncertainty

Those operating under above conditions are all 'entrepreneurs'. 

Example of Snaptax:
- Decide to launch a computer/phone based tax return.
- Started only with handling California tax returns. Got 350,000 downloads in first week.
- Was a small team that was allowed to operate independently inside Intuit.
- Had turned the culture from one experiment every tax season to 500 experiments over course of 3 months pre-tax season.
- Turned people from politicians (fight for that one feature) to actual entrepreneurs.

Chapter 3: Measure
-------------------
- Most companies track 'vanity metrics' - Is the product on time, within budget and with quality?
- First question is now 'How is it built', it's 'Whether should this be built?'
- Rather than track milestone times, outstanding bugs, and budget, track 'validated' metrics.
- What happens if the product is successful? Check customer downloads, revenue per customer.
- Story of IMVU. What was the strategy? The pitfalls of wanting vanity metrics and *not* wanting to release
- Realizing building the wrong product. How they pivoted (IM focused, to separate IM based strategy).

Chapter 4: Experiment
---------------------
Lean startup approach is like a scientific experiment. 

* You have assumptions
* Make a prediction (a hypothesis) based on those assumptions
* Run and experiment to 
* Measure the prediction and hence validate/invalidate the assumptions

In lean startup, the idea is to run experiments and validate assumptions before you doing extensive building.

Two important hypothesis to solve in any product. What is the:
1. 	Value Hypothesis: What problem is being solved and is the product doing a good job of it? Is it delivering value to the customer who is using it?
	A more detailed way to ask this question is:
	i.	 Do customers recognize the problem you are trying to solve
	ii.  If there was a solution, would they buy it
	iii. Would they but it from us?
	iv.  Can *we* build a solution for that problem?
2. Growth Hypothesis: Once we have a customer, how are we going to spread it? How will *new* customers discover the product or service?

Eg: Zappos, HP's volunteering program, Village Laundry Service, CFPB (Consumer Finance Protection Board)
 
Steer
=====
Vision leads to steering. Need to go through the Build-Measure-Lean feedback loop multiple times to test assumptions and quickly tune the product.

Chapter 5: Leap
---------------
Figure out the 'leap of faith' assumptions in the business plan. This is a key step that most miss. Eg: Facebook. Most think they can 'grow' like facebook by advertising. But the key is that facebook/hotmail grew without any advertising. Once folks used it, they wanted to tell others about it. Not by 'theater'.
Another way to validate assumptions is by using Analogs/Antilogs. Eg: iPod: Walkman was the analog, Napster was the antilog. Didn't build iTunes that way.

Also, keep in mind what are the key 
* Value Hypothesis and 
* Growth Hypothesis

Value Hypothesis: Some companies maybe profitable in short-term, but burn out long term. Eg: Ponzi Schemes - no value.
Others like amazon are not still profitable, but still providing lots of value.
Best way to test validate leap of faith assumptions is Genchi Gembutsu (By Toyota) - which is "Go and see for yourself". Probably translates for us to 'Design Thinking'. Observe the customer's problem, don't just accept other's word for it. Eg: Toyota Minivan.

Chapter 6: Test
---------------
Idea to test your assumptions as soon as possible with minimum waste. This is where MVP comes in - how do you quickly test your assumptions. Several examples:

1. Groupon: Picked up coupons - created a PDF and emailed it to people. Just to see if the concept would stick.
2. Box: Folks didn't understand they had a problem. And building it across different OSes was its value but take too much time. So just created a youtube video explaining how it'll work
3. Food on the Table (Concierge Service): CEO and COO actually asking beta customers what they want, deliver it and get feedback of how was it.

Quality in MVP: Don't get caught in the loop of adding too much quality. Your goal is usually to find out is it the right thing. Fixing all bugs can lead to more waste (for learning) and fatter MVP to add more features since timelines increase. Eg: IMVU's teleportation feature.
This is not easy to achieve - specially if we have patent, or first mover issues. But solve-able. Don't solve everything - but commit to rapidly iterating and fixing.

Chapter 7: Measure
------------------
Like any experiment it's always important to:
1. Establish the baseline
2. Tune the performance for the numbers you are tracking (talk about the right numbers)
3. If this yeilds results, great. If not, need to pivot.

The same as above can be said for our MPS performance. We see a number or stat, and start worrying. First thing is to establish a baseline and a way of measuring numbers easily. Then we can get into 'optimizations'.

Eg: Grockit - a company that was for learning. Had methods to 'Teach', 'Study Alone' and 'Group based Study'. Team was agile and doing product improvements based on founder's guidance. But revenues and subscription remained flat. Worse, it was hard to related which products and feature improvements were actually making a difference. The key was then, to do cohort analysis.
Cohort analysis requires that we make a small improvement or improvements, and test it against a small subset. Say 100-200 users. Do this repeatedly to do, 'controlled' user-testing and gather results. If improvements don't yield results over time, we know something is a miss and strategy needs to change.

Metrics needs to be:
* Actionable: Need to trace cause-and-affect. That's why cohort analysis is important. Make a small change, see the difference.
* Accessible: Ensure the key people have access to the data. Namely, the product development team.
* Auditable: Need to be able to produce this data. There a lot of conversations where data is re-analyzed and conclusions challenged.

Chapter 8: Pivot
----------------
As mentioned earlier, sometimes the tuning doesn't work. In this case, it is important to pivot - with product managers, business managers in the meeting. Several examples:

Votizen:
* Started out as a intent to indulge in social causes. Voters would register, and then pick their social cause, able to invite others to participate.
 -  After using some innovation accounting metrics of Registration, Activation, Retention, Referral they found Retention/Referral too low.
 -  Post tuning, R+R was at 5% and 4%. Ended up in land of living -dead.
* Did a zoom-in Pivot: Turned it into a social lobbying platform. Allow users, paid voters in the district to contact their representative over a cause.
 - Same R+R metrics wnet up to 21% and 54%. Now started looking at revenues and still very minimal.
* Did a customer-segment pivot: Rather that just users, pivoted to business customers. 
 - Not very high revenue either. Though they showed intent, they didn't actually buy.
* Did a platform pivot: (Not clearly understand): They started charging like ad-words. Find causes, and use it to message other voters on the site. Charging 20c/message.
 - Now earning $150M/year.

Each successive pivot took lesser time than the past. The time left for a startup is the number of pivots it can successfully do.

Pivot issues:
- First, avoid the use of vanity metrics.
- Two, have a clear hypothesis. If its not clear what you assume and what you want, it won't be clear if you are failing or passing.
- Third, Pivot requires courage and hard decisions to be made. People need to accept failure, accept what they learnt, and be clear on what the new pivot is going to be.

Same story with WealthManagement: Created as an online game, pivoted to sell leaders to wealth fund managers, then pivoted to wealth fund managers to start small funds due to intial investment costs by their infrastructure.

Various Pivots: Zoom-in/Zoom-out, Platform, engine of growth, channel/segment pivot etc.

Section 3: Accelerate
=====================

Batch
-----
Develop in small batches and keep work in progress small.
* Sealing envelopes
* Developing cars and machines in WWII Japan. Didn't have the resources of capacity or US. Would produce a lot of one thing and then move. 
* Japanese companies Made reconfiguring faster - so they only produced what was needed currently.
* Had an 'andon' cord. Stop production so production doesn't stop.
* Examples of Small Batches
	- Military contracter designing X-Ray portable system for detecting mines
	- School of One - Today you teach in large batches - yearly batches. School of one decides where you are in learning, how you learn (individual, instruction, groups) and tunes it to that. 
		-- Any learning from one is applied across to the other and instantly available for others to try and learn.

Pull - Don't push: Dont produce more than you need. Find out what you need and build along the line as much as you are asked.
Apply it to Snack bar: Those that finish first should be ordered first. 
In software use it to build a good BML cycle. What is the minimum number of customers we need to learn from? What is the experiment to be run to learn it? What is the smallest batch we can build to test that experiment?
Alphabet energy

Growth
--------
Engines of Growth: Paid, Viral or sticky.

"New Customers come from action of Past Customers"

1. Sticky: Attract and retain customers long-term. Mobile phone vs grocery aisle. Dont care what soda you buy.
	- Check customer retention vs customer acquisition. EG: 61% vs 40 %
2. Viral: Hotmail. Measured by Viral coefficient. Want it >= 1. DOn't usually charge customer directly.
3. Paid: How much it pays to acquire the customer, vs how much the customer pays. 

EG: Startup pivoted from being consumer targetted (Virally) to business (paid). cut the largest order, few 100 dollars. The NGO couldn't buy something this cheap. And startup didn't have sales team to 'roll' out the product.

Adapt
-------
Stay nimble and the 5 Whys?
* Adjust your process and performance based on current conditions.
* At what point do you stop the process and do something more drastic? Very useful in retros - root-causing. Ask why five times.
* Also don't boil the ocean - make 'proportional investments'. So harden important/error prone areas. Not everything.
* Train while on the go - like by making new trainees commit. If they make too many mistakes, improve training or fail-safe tools.
* Play 5 whys, don't play 5 blames.
* Reasonably involved, so don't hold it for high volume issues. 

Innovate
---------
Typically they do sustainable innovation. Need a clear path to do disruptive innovation.

- Lot of the above are done by large organizations. Do small batch product research and development towards sustained innovation.
- What you also need is to do disruptive innovation.
	- Secure but Scarce resources
	- Protection of the parent organization
	- Rewards linked to Long term product growth 
	- Sandbox to play in - protects both the product and the parent (parent because they know certain customers wont be touched)
		-- Child because they have a small set of customers/batch to experiment with without retribution.
	- Expand as it begins to disrupt.
	- Move sustained innovation ==> sustanence/outsources and ==> to new innovation
	

Application to SJC
------------------
- Who thinks this is AVC?
- Who thinks this is Shadow-IT?
- Who thinks this is Unified Proxy?
- Build-Measure-Learn
	- Building and engine
	-- BML over and over to fine tune/optimize on execution
	-- At some point you decide you're off and decide to Pivot on strategy
	-- Perhaps at some point need to change the Vision(??) (need a new startup?)
- Validated-Accounting
- Scaling up
- Turning doing a startup from an ART to science (BML)
- Great examples of startups (loved the one about learning - instruction/group